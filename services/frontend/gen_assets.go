// Code generated by "esc -pkg frontend -o services/frontend/gen_assets.go -prefix services/frontend/web_assets services/frontend/web_assets"; DO NOT EDIT.

package frontend

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "services/frontend/web_assets/index.html",
		size:    4080,
		modtime: 1609975706,
		compressed: `
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
`,
	},

	"/": {
		name:  "/",
		local: `services/frontend/web_assets`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"services/frontend/web_assets": {
		_escData["/index.html"],
	},
}
